<%#
# Index

This view is the template for the index page.
It is responsible for rendering the search bar, header and pagination.
It renders the `_table` partial to display details about the resources.

## Local variables:

- `page`:
  An instance of [Administrate::Page::Collection][1].
  Contains helper methods to help display a table,
  and knows which attributes should be displayed in the resource's table.
- `resources`:
  An instance of `ActiveRecord::Relation` containing the resources
  that match the user's search criteria.
  By default, these resources are passed to the table partial to be displayed.
- `search_term`:
  A string containing the term the user has searched for, if any.
- `show_search_bar`:
  A boolean that determines if the search bar should be shown.

[1]: http://www.rubydoc.info/gems/administrate/Administrate/Page/Collection
%>



<% content_for(:title) do %>
  <%= display_resource_name(page.resource_name) %>
<% end %>

<% content_for(:search) do %>
  <% if show_search_bar %>
    <%= render "search", search_term: search_term %>
  <% end %>
<% end %>

<header class="main-content__header" role="banner">
  <h1 class="main-content__page-title" id="page-title">
    <%= content_for(:title) %>
  </h1>

  <div>
   
  </div>
</header>

<section class="main-content__body main-content__body--flush">

  <% 
    with = params[:with].present? ? eval("{"+params[:with].gsub(/ ?= ?/,":")+"}") : {}
    if( with[:stat_type] && with[:stat_type] != "Financials")
  %>    
      <!-- <div id="container" style="min-width: 310px; height: 400px; margin: 0 auto"></div> -->
  <% end %>


  <%= render "collection", collection_presenter: page, resources: resources %>
  <%= paginate resources %>
</section>


<script>


<% 

  if( with[:stat_type] && with[:stat_type] != "Financials")

      
      duration = params[:search].downcase == "month" || params[:search].downcase == "week" ? params[:search] : "Month"
      user_stats = Stat.graph_data(with[:stat_type], duration)
      stats_by_date = user_stats.group_by{|s| "#{s.as_of_date}" }
      stats_by_name = user_stats.group_by{|s| "#{s.name}"}.map{ |name,stats| [name, stats.sort_by{|s| s.as_of_date} ] }.to_h 

%>  
Highcharts.chart('container', {
    chart: {
        type: 'column'
    },
    title: {
        text: 'User Stats'
    },
    xAxis: {
        categories: <%=raw stats_by_date.keys %>
    },
    yAxis: {
        min: 0,
        title: {
            text: 'Count'
        },
        stackLabels: {
            enabled: true,
            style: {
                fontWeight: 'bold',
                color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
            }
        }
    },
    legend: {
        align: 'right',
        x: -30,
        verticalAlign: 'top',
        y: 25,
        floating: true,
        backgroundColor: (Highcharts.theme && Highcharts.theme.background2) || 'white',
        borderColor: '#CCC',
        borderWidth: 1,
        shadow: false
    },
    tooltip: {
        headerFormat: '<b>{point.x}</b><br/>',
        pointFormat: '{series.name}: {point.y}<br/>Total: {point.stackTotal}'
    },
    plotOptions: {
        column: {
            stacking: 'normal',
            dataLabels: {
                enabled: true,
                color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white'
            }
        }
    },
    series: [
      <% stats_by_name.each do |name, stats| %>
      {
        name: <%=raw "'#{name}'" %>,
        data: <%=raw stats.collect(&:value).map{|v| v.to_i} %>
      },
      <% end %>
    ]
});

<% end %>
</script>